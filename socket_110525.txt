============================================
10. 프로세스의 이해와 활용
-------------------------------------------------------------------------------
10-1. 프로세스의 이해와 활용
1) 프로세스(Process) : 메모리의 공간을 차지한 상태에서 실행중인 프로그램
2) 프로세스 ID : 모든 프로세스는 생성되는 형태에 상관없이 운영체제로 부터 ID를 부여 받는다.
              2 이상의 정수 형태를 띤다.
3) 프로세스 상태 확인 명령 : ps au
3) 프로세스 함수 (fork)
 #include <unistd.h>
 
 pid_t fork(void);

 (1) 부모 프로세스 - fork 함수의 반환 값은 자식 프로세스의 ID
 (2) 자식 프로세스 - fork 함수의 반환 값은 0
 (3) fork 함수 호출 이후에는 두 프로세스가 동일한 코드를 실행 하는 완전히 다른 프로세스가 된다.
-------------------------------------------------------------------------------
10-2. 프로세스 & 좀비(Zombie) 프로세스
1) 프로세스가 생성 후에 main 함수의 실행이 완료 되어 있는 상태에서 사라지지 않고 좀비가 되어
시스템의 중요한 리소스를 차지하는 상태
2) 좀비 프로세스의 생성이유
 (1) 자식 프로세스 종료 되는 상황
  - 인자를 전달 하면서 exit를 호출하는 경우
  - main 함수에서 return 문을 실행하면서 값을 반환하는 경우
  (2) exit 함수로 전달 되는 인자 값과 main 함수의 return 문에 의해 반환되는 값은 운영체제에 전달.
   운영체제는 이 값이 자식프로세스를 전달한 부모에게 전달 될 때가지 소멸안함.=> 좀비 프로세스

<참고>
후면 처리 : 콘솔창에서 명령어의 실행을 후면에서 진행 하도록 하는 방식. 명령어 마지막에 '&' 를 추가함. 
 root@my_linux:/tcpip# ./ zombie &
-------------------------------------------------------------------------------























